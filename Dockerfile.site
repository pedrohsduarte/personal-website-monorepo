# Base image for installing dependencies
FROM node:20-alpine AS deps
 
# Install necessary packages
RUN apk add --no-cache libc6-compat
 
WORKDIR /usr/src/root-workspace
 
# Install dependencies based on the lock file
COPY package.json yarn.lock turbo.json ./

# Copy workspace package.json files
COPY apps/site/package.json ./apps/site/
COPY packages/eslint-config-custom/package.json ./packages/eslint-config-custom/
COPY packages/prettier-config-custom/package.json ./packages/prettier-config-custom/
COPY packages/tsconfig/package.json ./packages/tsconfig/
COPY packages/ui/package.json ./packages/ui/

RUN yarn install

# Development image
FROM node:20-alpine AS dev.site
 
WORKDIR /usr/src/root-workspace
 
# Copy necessary files from the deps stage
COPY --from=deps /usr/src/root-workspace ./
 
# Copy the source code
COPY . .

EXPOSE 3000

WORKDIR /usr/src/root-workspace/apps/site
 
# Command to run the app in development mode
CMD ["yarn", "dev"]
 
# Builder image for production
FROM node:20-alpine AS builder
 
WORKDIR /usr/src/app
 
# Copy the source code and build it
COPY . .
RUN yarn build
 
# Production image
FROM node:20-alpine AS runner
 
WORKDIR /usr/src/app
 
ENV NODE_ENV production
 
# Add non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 site
 
# Copy only necessary files for production
COPY --from=builder /usr/src/app/dist ./dist
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile --production
 
USER site
 
EXPOSE 3000
 
ENV PORT 3000
 
CMD ["node", "dist/server.js"]
